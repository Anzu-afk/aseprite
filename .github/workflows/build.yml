name: build
on: [push, pull_request]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        build_type: [Release]
        enable_ui: [on]
        include:
          - os: windows-latest
            build_type: Release
            enable_ui: on
    steps:
    # 检出代码和子模块
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    # Ninja 构建工具安装
    - uses: seanmiddleditch/gha-setup-ninja@master

    # 安装 MSVC 编译环境（仅在 Windows 上运行）
    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'

    # 安装 7z 解压工具（仅在 Windows 上运行）
    - name: Install 7z on Windows
      if: runner.os == 'Windows'
      run: choco install 7zip --no-progress

    # 安装依赖项 (如果将来需要支持其他操作系统，可以在这里添加)
    # - name: Install Dependencies
    #   shell: bash
    #   run: |
    #     if [[ "${{ runner.os }}" == "ubuntu-latest" ]] ; then
    #       sudo apt-get update -qq
    #       sudo apt-get install -y \
    #         libx11-dev libxcursor-dev libxi-dev
    #     fi

    # 生成Makefiles
    - name: Generating Makefiles
      shell: bash
      run: |
        # 关闭Windows下的ccache
        export enable_ccache=off

        # 下载并解压 skia 库
        curl -L https://github.com/blueloveTH/aseprite/releases/download/v0.01/skia.zip --output skia.zip
        7z x skia.zip
        
        # 配置CMake构建
        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DENABLE_UI=${{ matrix.enable_ui }} \
          -DENABLE_CCACHE=$enable_ccache \
          -DLAF_BACKEND=skia \
          -DSKIA_DIR=./skia \
          -DSKIA_LIBRARY_DIR=./skia/out/Release-x64 \
          -DSKIA_LIBRARY=./skia/out/Release-x64/skia.lib

    # 编译
    - name: Compiling
      shell: bash
      run: |
        cd build && ninja

    # 上传构建产物 (相对路径)
    - uses: actions/upload-artifact@v4
      with:
        name: aseprite
        path: |
          build/bin/data
          build/bin/aseprite.exe
